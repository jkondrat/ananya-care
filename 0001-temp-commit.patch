From ebce1bee7fccc4856f42a386a4b3f2323eaaae6f Mon Sep 17 00:00:00 2001
From: vishnu karthik <karthikl@thoughtworks.com>
Date: Fri, 7 Jun 2013 18:42:15 +0530
Subject: [PATCH] temp commit

---
 .../care/reporting/domain/dimension/ChildCase.java |    3 +
 .../reporting/domain/dimension/MotherCase.java     |    3 +
 .../reporting/listener/CommcareCaseListener.java   |   25 ++++++
 .../care/reporting/processors/CaseProcessor.java   |    7 ++
 .../reporting/processors/GenericCaseProcessor.java |   20 +++++
 .../processors/GenericCaseProcessorWorker.java     |   51 +++++++++++
 .../processors/GenericFormProcessorWorker.java     |   64 ++++----------
 .../care/reporting/processors/ProcessorWorker.java |   53 +++++++++++
 .../care/reporting/repository/DbRepository.java    |    5 ++
 .../care/reporting/repository/Repository.java      |    4 +
 .../processors/GenericCaseProcessorWorkerTest.java |   93 ++++++++++++++++++++
 .../care/reporting/repository/DbRepositoryIT.java  |   59 +++++++++++--
 12 files changed, 332 insertions(+), 55 deletions(-)
 create mode 100644 care-reporting-bundle/src/main/java/org/motechproject/care/reporting/listener/CommcareCaseListener.java
 create mode 100644 care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/CaseProcessor.java
 create mode 100644 care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericCaseProcessor.java
 create mode 100644 care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericCaseProcessorWorker.java
 create mode 100644 care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/ProcessorWorker.java
 create mode 100644 care-reporting-bundle/src/test/java/org/motechproject/care/reporting/processors/GenericCaseProcessorWorkerTest.java

diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/domain/dimension/ChildCase.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/domain/dimension/ChildCase.java
index 849c939..29b65e4 100644
--- a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/domain/dimension/ChildCase.java
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/domain/dimension/ChildCase.java
@@ -163,6 +163,7 @@ public class ChildCase implements java.io.Serializable {
 
 	@ManyToOne(fetch = FetchType.LAZY)
 	@JoinColumn(name = "user_id")
+    @Cascade(value = org.hibernate.annotations.CascadeType.ALL)
 	public Flw getFlw() {
 		return this.flw;
 	}
@@ -173,6 +174,7 @@ public class ChildCase implements java.io.Serializable {
 
 	@ManyToOne(fetch = FetchType.LAZY)
 	@JoinColumn(name = "mother_id")
+    @Cascade(value = org.hibernate.annotations.CascadeType.ALL)
 	public MotherCase getMotherCase() {
 		return this.motherCase;
 	}
@@ -183,6 +185,7 @@ public class ChildCase implements java.io.Serializable {
 
 	@ManyToOne(fetch = FetchType.LAZY)
 	@JoinColumn(name = "owner_id")
+    @Cascade(value = org.hibernate.annotations.CascadeType.ALL)
 	public FlwGroup getFlwGroup() {
 		return this.flwGroup;
 	}
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/domain/dimension/MotherCase.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/domain/dimension/MotherCase.java
index 1c1bdd0..66d81c9 100644
--- a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/domain/dimension/MotherCase.java
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/domain/dimension/MotherCase.java
@@ -2,6 +2,7 @@ package org.motechproject.care.reporting.domain.dimension;
 
 // Generated Jun 4, 2013 4:50:32 PM by Hibernate Tools 3.4.0.CR1
 
+import org.hibernate.annotations.Cascade;
 import org.motechproject.care.reporting.domain.measure.*;
 
 import javax.persistence.*;
@@ -300,6 +301,7 @@ public class MotherCase implements java.io.Serializable {
 
 	@ManyToOne(fetch = FetchType.LAZY)
 	@JoinColumn(name = "user_id")
+    @Cascade(value = org.hibernate.annotations.CascadeType.ALL)
 	public Flw getFlw() {
 		return this.flw;
 	}
@@ -310,6 +312,7 @@ public class MotherCase implements java.io.Serializable {
 
 	@ManyToOne(fetch = FetchType.LAZY)
 	@JoinColumn(name = "owner_id")
+    @Cascade(value = org.hibernate.annotations.CascadeType.ALL)
 	public FlwGroup getFlwGroup() {
 		return this.flwGroup;
 	}
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/listener/CommcareCaseListener.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/listener/CommcareCaseListener.java
new file mode 100644
index 0000000..088203d
--- /dev/null
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/listener/CommcareCaseListener.java
@@ -0,0 +1,25 @@
+package org.motechproject.care.reporting.listener;
+
+import org.motechproject.care.reporting.processors.CaseProcessor;
+import org.motechproject.care.reporting.processors.FormProcessor;
+import org.motechproject.commcare.builder.CommcareFormBuilder;
+import org.motechproject.commcare.domain.CommcareForm;
+import org.motechproject.commcare.events.CaseEvent;
+import org.motechproject.commcare.events.constants.EventSubjects;
+import org.motechproject.event.MotechEvent;
+import org.motechproject.event.listener.annotations.MotechListener;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+@Component
+public class CommcareCaseListener {
+
+    @Autowired
+    CaseProcessor caseProcessor;
+
+    @MotechListener(subjects = EventSubjects.CASE_EVENT)
+    public void handleEvent(MotechEvent event) {
+        CaseEvent caseEvent = new CaseEvent(event);
+        caseProcessor.process(caseEvent);
+    }
+}
\ No newline at end of file
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/CaseProcessor.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/CaseProcessor.java
new file mode 100644
index 0000000..c754d51
--- /dev/null
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/CaseProcessor.java
@@ -0,0 +1,7 @@
+package org.motechproject.care.reporting.processors;
+
+import org.motechproject.commcare.events.CaseEvent;
+
+public interface CaseProcessor {
+    void process(CaseEvent caseEvent);
+}
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericCaseProcessor.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericCaseProcessor.java
new file mode 100644
index 0000000..aec4571
--- /dev/null
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericCaseProcessor.java
@@ -0,0 +1,20 @@
+package org.motechproject.care.reporting.processors;
+
+import org.motechproject.care.reporting.service.Service;
+import org.motechproject.commcare.domain.CommcareForm;
+import org.motechproject.commcare.events.CaseEvent;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+@Component
+public class GenericCaseProcessor implements CaseProcessor {
+    @Autowired
+    private Service service;
+
+    @Override
+    public void process(CaseEvent caseEvent) {
+        new GenericCaseProcessorWorker(service).process(caseEvent);
+    }
+}
+
+
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericCaseProcessorWorker.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericCaseProcessorWorker.java
new file mode 100644
index 0000000..88acf35
--- /dev/null
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericCaseProcessorWorker.java
@@ -0,0 +1,51 @@
+package org.motechproject.care.reporting.processors;
+
+import org.motechproject.care.reporting.domain.dimension.ChildCase;
+import org.motechproject.care.reporting.domain.dimension.MotherCase;
+import org.motechproject.care.reporting.factory.CaseFactory;
+import org.motechproject.care.reporting.mapper.GenericMapper;
+import org.motechproject.care.reporting.parser.CaseInfoParser;
+import org.motechproject.care.reporting.service.Service;
+import org.motechproject.commcare.events.CaseEvent;
+
+import java.io.Serializable;
+import java.util.Map;
+
+public class GenericCaseProcessorWorker extends ProcessorWorker {
+
+    public GenericCaseProcessorWorker(Service service) {
+        super(service);
+    }
+
+    public void process(CaseEvent caseEvent) {
+        final Class<?> caseType = CaseFactory.getCase(caseEvent.getCaseType());
+        final Map<String, String> caseMap = new CaseInfoParser().parse(caseEvent);
+        Object patientCase = new GenericMapper().map(caseMap, caseType);
+        Serializable serializable = processCase(patientCase, caseMap);
+        service.save(serializable);
+    }
+
+    private Serializable processCase(Object patient, Map<String, String> caseMap) {
+        Class<?> clazz = patient.getClass();
+        if (clazz.equals(MotherCase.class)) {
+            return processMother(patient, caseMap);
+        } else if (clazz.equals(ChildCase.class)) {
+            return processChild(patient, caseMap);
+        }
+        return null;
+    }
+
+    private Serializable processMother(Object mother, Map<String, String> caseMap) {
+        setFlw(caseMap.get("userId"), mother);
+        setFlwGroup(caseMap.get("ownerId"), mother);
+        return (Serializable) mother;
+    }
+
+    private Serializable processChild(Object child, Map<String, String> caseMap) {
+        setMotherCase(caseMap.get("motherId"), child);
+        setFlw(caseMap.get("userId"), child);
+        setFlwGroup(caseMap.get("ownerId"), child);
+        return (Serializable) child;
+    }
+
+}
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericFormProcessorWorker.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericFormProcessorWorker.java
index f17b85e..4ca6b41 100644
--- a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericFormProcessorWorker.java
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/GenericFormProcessorWorker.java
@@ -1,9 +1,5 @@
 package org.motechproject.care.reporting.processors;
 
-import org.apache.commons.lang.StringUtils;
-import org.motechproject.care.reporting.domain.dimension.ChildCase;
-import org.motechproject.care.reporting.domain.dimension.Flw;
-import org.motechproject.care.reporting.domain.dimension.MotherCase;
 import org.motechproject.care.reporting.enums.CaseType;
 import org.motechproject.care.reporting.factory.FormFactory;
 import org.motechproject.care.reporting.mapper.GenericMapper;
@@ -11,7 +7,6 @@ import org.motechproject.care.reporting.parser.ChildInfoParser;
 import org.motechproject.care.reporting.parser.MetaInfoParser;
 import org.motechproject.care.reporting.parser.MotherInfoParser;
 import org.motechproject.care.reporting.service.Service;
-import org.motechproject.care.reporting.utils.ObjectUtils;
 import org.motechproject.commcare.domain.CommcareForm;
 
 import java.io.Serializable;
@@ -20,19 +15,18 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-public class GenericFormProcessorWorker {
+public class GenericFormProcessorWorker extends ProcessorWorker {
 
-    private CommcareForm commcareForm;
-    private Map<String, String> metadata;
-    private Service service;
     Class<?> motherForm;
     Class<?> childForm;
+    private CommcareForm commcareForm;
+    private Map<String, String> metadata;
 
-    public GenericFormProcessorWorker(Service service){
-        this.service = service;
+    public GenericFormProcessorWorker(Service service) {
+        super(service);
     }
 
-    public void process(CommcareForm commcareForm){
+    public void process(CommcareForm commcareForm) {
         initialize(commcareForm);
         Serializable serializable = parseMotherForm();
         saveForm(serializable, motherForm);
@@ -41,7 +35,7 @@ public class GenericFormProcessorWorker {
         saveForm(serializables, childForm);
     }
 
-    void initialize(CommcareForm commcareForm){
+    void initialize(CommcareForm commcareForm) {
         this.commcareForm = commcareForm;
         metadata = new MetaInfoParser().parse(commcareForm);
         String namespace = namespace(commcareForm);
@@ -61,14 +55,14 @@ public class GenericFormProcessorWorker {
         return (Serializable) formObject;
     }
 
-    List<Serializable> parseChildForms(){
-        if(null == childForm)
+    List<Serializable> parseChildForms() {
+        if (null == childForm)
             return new ArrayList<>();
 
         List<Serializable> childForms = new ArrayList<>();
         List<Map<String, String>> childDetails = new ChildInfoParser().parse(commcareForm);
 
-        for(Map<String, String> childDetail: childDetails){
+        for (Map<String, String> childDetail : childDetails) {
 
             Map<String, String> childInfo = new HashMap<>(metadata);
             childInfo.putAll(childDetail);
@@ -81,44 +75,16 @@ public class GenericFormProcessorWorker {
         return childForms;
     }
 
-     void saveForm(Serializable form, Class<?> type){
-         service.save(type.cast(form));
-     }
-
-     void saveForm(List<Serializable> forms, Class<?> type){
-        for(Serializable form: forms){
-            saveForm(form, type);
-        }
-     }
-
-    private void setMotherCase(String caseId, Object form){
-        if(StringUtils.isEmpty(caseId)){
-            return;
-        }
-
-        MotherCase motherCase = service.getMotherCase(caseId);
-        ObjectUtils.set(form, "motherCase", motherCase);
-    }
-
-    private void setChildCase(String caseId, Object form){
-        if(StringUtils.isEmpty(caseId)){
-            return;
-        }
-
-        ChildCase childCase = service.getChildCase(caseId);
-        ObjectUtils.set(form, "childCase", childCase);
+    void saveForm(Serializable form, Class<?> type) {
+        service.save(type.cast(form));
     }
 
-    private void setFlw(String flwId, Object form){
-        if(StringUtils.isEmpty(flwId)){
-            return;
+    void saveForm(List<Serializable> forms, Class<?> type) {
+        for (Serializable form : forms) {
+            saveForm(form, type);
         }
-
-        Flw flw = service.getFlw(flwId);
-        ObjectUtils.set(form, "flw", flw);
     }
 
-
     private String namespace(CommcareForm commcareForm) {
         return commcareForm.getForm().getAttributes().get("xmlns");
     }
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/ProcessorWorker.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/ProcessorWorker.java
new file mode 100644
index 0000000..6e0686b
--- /dev/null
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/processors/ProcessorWorker.java
@@ -0,0 +1,53 @@
+package org.motechproject.care.reporting.processors;
+
+import org.apache.commons.lang.StringUtils;
+import org.motechproject.care.reporting.domain.dimension.ChildCase;
+import org.motechproject.care.reporting.domain.dimension.Flw;
+import org.motechproject.care.reporting.domain.dimension.FlwGroup;
+import org.motechproject.care.reporting.domain.dimension.MotherCase;
+import org.motechproject.care.reporting.service.Service;
+import org.motechproject.care.reporting.utils.ObjectUtils;
+
+public class ProcessorWorker {
+    protected Service service;
+
+    public ProcessorWorker(Service service) {
+        this.service = service;
+    }
+
+    protected void setFlwGroup(String ownerId, Object object) {
+        if (StringUtils.isEmpty(ownerId)) {
+            return;
+        }
+
+        FlwGroup motherCase = service.getGroup(ownerId);
+        ObjectUtils.set(object, "flwGroup", motherCase);
+    }
+
+    protected void setMotherCase(String caseId, Object object) {
+        if (StringUtils.isEmpty(caseId)) {
+            return;
+        }
+
+        MotherCase motherCase = service.getMotherCase(caseId);
+        ObjectUtils.set(object, "motherCase", motherCase);
+    }
+
+    protected void setChildCase(String caseId, Object object) {
+        if (StringUtils.isEmpty(caseId)) {
+            return;
+        }
+
+        ChildCase childCase = service.getChildCase(caseId);
+        ObjectUtils.set(object, "childCase", childCase);
+    }
+
+    protected void setFlw(String flwId, Object object) {
+        if (StringUtils.isEmpty(flwId)) {
+            return;
+        }
+
+        Flw flw = service.getFlw(flwId);
+        ObjectUtils.set(object, "flw", flw);
+    }
+}
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/repository/DbRepository.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/repository/DbRepository.java
index 0fc6495..12776d7 100644
--- a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/repository/DbRepository.java
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/repository/DbRepository.java
@@ -26,6 +26,11 @@ public class DbRepository implements org.motechproject.care.reporting.repository
     }
 
     @Override
+    public <T> void saveOrUpdate(T instances, String entityName) {
+        template.saveOrUpdate(entityName, instances);
+    }
+
+    @Override
     public <T> T get(Class<T> entityClass, int id) {
         return template.get(entityClass, id);
     }
diff --git a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/repository/Repository.java b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/repository/Repository.java
index ce43313..9f1b6da 100644
--- a/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/repository/Repository.java
+++ b/care-reporting-bundle/src/main/java/org/motechproject/care/reporting/repository/Repository.java
@@ -1,5 +1,7 @@
 package org.motechproject.care.reporting.repository;
 
+import org.motechproject.care.reporting.domain.dimension.ChildCase;
+
 import java.util.List;
 
 public interface Repository {
@@ -10,4 +12,6 @@ public interface Repository {
     <T> T get(Class<T> entityClass, String fieldName, Object value);
 
     <T> void saveOrUpdateAll(List<T> instances);
+
+    <T> void saveOrUpdate(T instance, String entityName);
 }
diff --git a/care-reporting-bundle/src/test/java/org/motechproject/care/reporting/processors/GenericCaseProcessorWorkerTest.java b/care-reporting-bundle/src/test/java/org/motechproject/care/reporting/processors/GenericCaseProcessorWorkerTest.java
new file mode 100644
index 0000000..1f4d2a6
--- /dev/null
+++ b/care-reporting-bundle/src/test/java/org/motechproject/care/reporting/processors/GenericCaseProcessorWorkerTest.java
@@ -0,0 +1,93 @@
+package org.motechproject.care.reporting.processors;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.motechproject.care.reporting.builder.CaseEventBuilder;
+import org.motechproject.care.reporting.domain.dimension.ChildCase;
+import org.motechproject.care.reporting.domain.dimension.Flw;
+import org.motechproject.care.reporting.domain.dimension.FlwGroup;
+import org.motechproject.care.reporting.domain.dimension.MotherCase;
+import org.motechproject.care.reporting.service.Service;
+import org.motechproject.commcare.events.CaseEvent;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.*;
+import static org.mockito.MockitoAnnotations.initMocks;
+
+public class GenericCaseProcessorWorkerTest {
+
+
+    @Mock
+    private Service service;
+    private GenericCaseProcessorWorker caseWorker;
+
+    @Before
+    public void setUp() {
+        initMocks(this);
+        caseWorker = new GenericCaseProcessorWorker(service);
+    }
+
+    @Test
+    public void shouldParseMotherCase() throws Exception {
+        String flwId = "user id";
+        String groupId = "group id";
+        Flw expectedFlw = new Flw(1);
+        FlwGroup expectedGroup = new FlwGroup(2);
+        String caseName = "case name";
+        CaseEvent caseEvent = new CaseEventBuilder("case id")
+                .withCaseName(caseName)
+                .withCaseType("cc_bihar_pregnancy")
+                .withUserId(flwId)
+                .with("owner_id", groupId)
+                .build();
+        when(service.getFlw(flwId)).thenReturn(expectedFlw);
+        when(service.getGroup(groupId)).thenReturn(expectedGroup);
+
+        caseWorker.process(caseEvent);
+
+        verify(service).getFlw(flwId);
+        verify(service).getGroup(groupId);
+        verify(service, never()).getMotherCase(anyString());
+        ArgumentCaptor<MotherCase> motherCaptor = ArgumentCaptor.forClass(MotherCase.class);
+        verify(service).save(motherCaptor.capture());
+        MotherCase actualMotherCase = motherCaptor.getValue();
+        assertEquals(expectedFlw, actualMotherCase.getFlw());
+        assertEquals(expectedGroup, actualMotherCase.getFlwGroup());
+        assertEquals(caseName, actualMotherCase.getCaseName());
+    }
+
+    @Test
+    public void shouldParseChildCase() throws Exception {
+        String flwId = "user id";
+        String groupId = "group id";
+        String motherId = "mother id";
+        Flw expectedFlw = new Flw(1);
+        FlwGroup expectedGroup = new FlwGroup(2);
+        MotherCase expectedMother = new MotherCase(3);
+        CaseEvent caseEvent = new CaseEventBuilder("case id")
+                .withCaseName("case name")
+                .withCaseType("cc_bihar_newborn")
+                .withUserId(flwId)
+                .with("owner_id", groupId)
+                .with("mother_id", motherId)
+                .build();
+        when(service.getFlw(flwId)).thenReturn(expectedFlw);
+        when(service.getGroup(groupId)).thenReturn(expectedGroup);
+        when(service.getMotherCase(motherId)).thenReturn(expectedMother);
+
+        caseWorker.process(caseEvent);
+
+        verify(service).getFlw(flwId);
+        verify(service).getGroup(groupId);
+        verify(service).getMotherCase(motherId);
+        ArgumentCaptor<ChildCase> childCaptor = ArgumentCaptor.forClass(ChildCase.class);
+        verify(service).save(childCaptor.capture());
+        ChildCase actualChildCase = childCaptor.getValue();
+        assertEquals(expectedFlw, actualChildCase.getFlw());
+        assertEquals(expectedGroup, actualChildCase.getFlwGroup());
+        assertEquals(expectedMother, actualChildCase.getMotherCase());
+    }
+}
diff --git a/care-reporting-bundle/src/test/java/org/motechproject/care/reporting/repository/DbRepositoryIT.java b/care-reporting-bundle/src/test/java/org/motechproject/care/reporting/repository/DbRepositoryIT.java
index f75b262..6454f82 100644
--- a/care-reporting-bundle/src/test/java/org/motechproject/care/reporting/repository/DbRepositoryIT.java
+++ b/care-reporting-bundle/src/test/java/org/motechproject/care/reporting/repository/DbRepositoryIT.java
@@ -4,8 +4,10 @@ import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.motechproject.care.reporting.domain.dimension.ChildCase;
 import org.motechproject.care.reporting.domain.dimension.Flw;
 import org.motechproject.care.reporting.domain.dimension.FlwGroup;
+import org.motechproject.care.reporting.domain.dimension.MotherCase;
 import org.motechproject.care.reporting.domain.measure.NewForm;
 import org.springframework.beans.factory.annotation.Autowired;
 
@@ -13,9 +15,7 @@ import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNull;
-import static junit.framework.Assert.assertTrue;
+import static junit.framework.Assert.*;
 
 public class DbRepositoryIT extends SpringIntegrationTest {
 
@@ -25,6 +25,8 @@ public class DbRepositoryIT extends SpringIntegrationTest {
     @Before
     @After
     public void setUp() {
+        template.deleteAll(template.loadAll(ChildCase.class));
+        template.deleteAll(template.loadAll(MotherCase.class));
         template.deleteAll(template.loadAll(Flw.class));
         template.deleteAll(template.loadAll(FlwGroup.class));
     }
@@ -68,7 +70,7 @@ public class DbRepositoryIT extends SpringIntegrationTest {
     }
 
     @Test
-    public void shouldGetByNonMatchingCriteria(){
+    public void shouldGetByNonMatchingCriteria() {
 
         NewForm newForm = repository.get(NewForm.class, "caseName", "father");
 
@@ -76,7 +78,7 @@ public class DbRepositoryIT extends SpringIntegrationTest {
     }
 
     @Test
-    public void shouldPerformCascadeSaveOnFlw(){
+    public void shouldPerformCascadeSaveOnFlw() {
         Flw flw = new Flw();
         HashSet<FlwGroup> flwGroups = new HashSet<>();
         flwGroups.add(new FlwGroup());
@@ -94,7 +96,7 @@ public class DbRepositoryIT extends SpringIntegrationTest {
     }
 
     @Test
-    public void shouldSaveOrUpdateAll(){
+    public void shouldSaveOrUpdateAll() {
         final FlwGroup existingFlwGroup = new FlwGroup();
         existingFlwGroup.setName("group1");
         final FlwGroup newFlwGroup = new FlwGroup();
@@ -113,4 +115,49 @@ public class DbRepositoryIT extends SpringIntegrationTest {
         assertTrue(flwGroupsFromDb.contains(existingFlwGroup));
         assertTrue(flwGroupsFromDb.contains(newFlwGroup));
     }
+
+    @Test
+    public void shouldSaveCase() {
+        String flwId = "flwId";
+        String groupId = "groupId";
+        String caseId = "caseId";
+        Flw flw = new Flw();
+        flw.setFlwId(flwId);
+        FlwGroup flwGroup = new FlwGroup();
+        flwGroup.setGroupId(groupId);
+        MotherCase expectedMother = new MotherCase();
+        expectedMother.setCaseId(caseId);
+        expectedMother.setFlw(flw);
+        expectedMother.setFlwGroup(flwGroup);
+
+        repository.save(expectedMother);
+
+        List<MotherCase> motherCases = template.loadAll(MotherCase.class);
+        assertEquals(1, motherCases.size());
+        MotherCase actualMother = motherCases.get(0);
+        assertEquals(caseId, actualMother.getCaseId());
+        assertEquals(flwId, actualMother.getFlw().getFlwId());
+        assertEquals(groupId, actualMother.getFlwGroup().getGroupId());
+    }
+
+    @Test
+    public void shouldUpdateCaseIfPresent() {
+        String caseId = "case Id";
+        ChildCase existingChild = new ChildCase();
+        existingChild.setCaseId(caseId);
+        existingChild.setName("old Child name");
+        template.save(existingChild);
+
+        ChildCase newChild = new ChildCase();
+        newChild.setCaseId(caseId);
+        String newChildName = "new child name";
+        newChild.setName(newChildName);
+
+        repository.saveOrUpdate(newChild, "caseId");
+
+        List<ChildCase> childCases = template.loadAll(ChildCase.class);
+        assertEquals(1, childCases.size());
+        assertEquals(newChildName, childCases.get(0).getCaseName());
+
+    }
 }
-- 
1.7.10.2 (Apple Git-33)

