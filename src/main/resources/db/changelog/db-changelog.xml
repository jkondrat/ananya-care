<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.0.xsd">

    <changeSet id="CARE #43" author="Łukasz Gąsior">
        <sql>
            insert into dashboard_app.dashboard (name, tab_position) values ('Mortality', 4);
            insert into dashboard_app.indicator_category (name, short_code, dashboard_id) values ('Mortality', 'MRT', (select dashboard_id from dashboard_app.dashboard where name = 'Mortality'));
            update dashboard_app.dashboard set indicator_category_id = 3 where dashboard_id = (select dashboard_id from dashboard_app.dashboard where name = 'Mortality');
        </sql>
    </changeSet>

    <changeSet id="CARE #10" author="Adrian Boguszewski">
        <dropColumn schemaName="dashboard_app" tableName="dashboard" columnName="indicator_category_id"/>
    </changeSet>

    <changeSet id="CARE #13" author="Łukasz Gąsior">
        <sql>
            update dashboard_app.area set name = 'Bihar', level_id = 1, parent_area_id = null where area_id = 1;
            update dashboard_app.area set name = 'Begusarai', level_id = 2, parent_area_id = 1 where area_id = 2;
            update dashboard_app.area set name = 'Champaran East', level_id = 2, parent_area_id = 1 where area_id = 3;
            update dashboard_app.area set name = 'Patna', level_id = 2, parent_area_id = 1 where area_id = 4;
            update dashboard_app.area set name = 'Saharsa', level_id = 2, parent_area_id = 1 where area_id = 5;
            delete from dashboard_app.area where name not in ('Begusarai', 'Champaran East', 'Patna', 'Saharsa', 'Bihar');
            update dashboard_app.care_user set area_id = 1;
        </sql>
    </changeSet>

    <changeSet id="CARE #46" author="Lech Różański">
        <sql>
            insert into dashboard_app.dashboard (name, tab_position) values ('Essential Newborn Care', 4);
            insert into dashboard_app.indicator_category (name, short_code, dashboard_id) values ('Essential Newborn Care', 'ENC', 5);
            insert into dashboard_app.trend (positive_diff, negative_diff, creation_date, modification_date)
                values (1, -1, now(), now());
            insert into dashboard_app.complex_condition(name, creation_date, modification_date)
                values ('delivery_child_form.breastfed_hour = Yes', now(), now());
            insert into dashboard_app.condition(complex_condition_id, computed_field_id, comparison_symbol_id, comparison_value, creation_date, modification_date)
                values (2, 847, 1, true, now(), now());
            insert into dashboard_app.indicator (type_id, area_id, trend_id, complex_condition_id, computed_field_id, frequency, name, creation_date, modification_date)
                values (3, 1, 2, 2, 847, 30, '% of new born breastfed within one hour of delivery', now(), now());
            insert into dashboard_app.indicator_indicator_category(indicator_id, indicator_category_id) values (2, 3);
            insert into dashboard_app.report (indicator_id, report_type_id, creation_date, modification_date)
                values (2, 3, now(), now());
            insert into dashboard_app.indicator_user(indicator_id, user_id) values (2, 1);
        </sql>
    </changeSet>

    <changeSet id="CARE #5" author="Adrian Boguszewski">
        <addUniqueConstraint columnNames="short_code"
                             constraintName="short_code_uk"
                             schemaName="dashboard_app"
                             tableName="indicator_category"/>
    </changeSet>
    
    <changeSet id="CARE #48" author="Adrian Boguszewski">
        <sql>
            create table dashboard_app.cron_task(
                cron_task_id serial not null,
                name character varying(100) not null,
                second character varying(100) not null,
                minute character varying(100) not null,
                hour character varying(50) not null,
                day character varying(50) not null,
                month character varying(30) not null,
                week_day character varying(20) not null,
                year character varying(100) not null,
                creation_date timestamp,
                modification_date timestamp,
            constraint cron_task_pk primary key (cron_task_id),
            constraint cron_task_name_uk unique (name));

            insert into dashboard_app.cron_task (name, second, minute, hour, day, month, week_day, year, creation_date, modification_date)
                values ('calculate_indicator_values', '0', '0', '0', '*', '*', '?', '', now(), now());
        </sql>
    </changeSet>

    <changeSet id="CARE #26" author="Lech Różański">
        <dropColumn schemaName="dashboard_app"
                    tableName="condition"
                    columnName="comparison_value" />
        <renameColumn schemaName="dashboard_app"
                      tableName="condition"
                      oldColumnName="computed_field_id"
                      newColumnName="field_1_id" />
        <sql>
            create table dashboard_app.field_comparison (
                field_comparison_id serial not null,
                condition_id integer not null,
                field_2_id integer not null,
                constraint field_comparison_pk primary key (field_comparison_id),
                constraint field_comparison_condition_id foreign key (condition_id)
                references dashboard_app.condition (condition_id) match full
                on delete cascade on update cascade not deferrable,
                constraint field_comparison_field_2_id foreign key (field_2_id)
                references dashboard_app.computed_field (computed_field_id) match full
                on delete cascade on update cascade not deferrable
            );

            create table dashboard_app.value_comparison (
                value_comparison_id serial not null,
                condition_id integer not null,
                value character varying(50) not null,
                constraint value_comparison_pk primary key (value_comparison_id),
                constraint field_comparison_condition_id foreign key (condition_id)
                references dashboard_app.condition (condition_id) match full
                on delete cascade on update cascade not deferrable
            );

            create table dashboard_app.date_diff_comparison (
                date_diff_comparison_id serial not null,
                condition_id integer not null,
                field_2_id integer not null,
                value integer not null,
                constraint date_diff_comparison_pk primary key (date_diff_comparison_id),
                constraint field_comparison_condition_id foreign key (condition_id)
                references dashboard_app.condition (condition_id) match full
                on delete cascade on update cascade not deferrable,
                constraint date_diff_comparison_field_2_id foreign key (field_2_id)
                references dashboard_app.computed_field (computed_field_id) match full
                on delete cascade on update cascade not deferrable
            );
        </sql>
    </changeSet>

    <changeSet id="CARE #37" author="Łukasz Gąsior">
        <sql>
            update dashboard_app.level set name = 'state' where level_id = 1;
            update dashboard_app.level set name = 'district' where level_id = 2;
            update dashboard_app.level set name = 'block' where level_id = 3;
            update dashboard_app.level set name = 'panchayat' where level_id = 4;
            update dashboard_app.level set name = 'village' where level_id = 5;

            insert into dashboard_app.value_comparison(condition_id, value) values (1, 90), (2, 'true');
        </sql>
    </changeSet>
    
    <changeSet id="CARE #46" author="Pawel Reise">
        <update tableName="indicator_category" schemaName="dashboard_app">
            <column name="dashboard_id" value="6" />
            <where>name = 'Essential Newborn Care'</where>
        </update>
        <update tableName="indicator_indicator_category" schemaName="dashboard_app">
            <column name="indicator_category_id" value="4" />
            <where>indicator_id = 2</where>
        </update>
        <insert tableName="report_dashboard" schemaName="dashboard_app">
            <column name="report_id" value="2"></column>
            <column name="dashboard_id" value="6"></column>
        </insert>
        <update tableName="indicator" schemaName="dashboard_app">
            <column name="frequency" value="60" type="integer" />
            <where>indicator_id = 1 or indicator_id = 2</where>
        </update>
    </changeSet>

    <changeSet id="CARE #6" author="Łukasz Gąsior">
        <dropColumn columnName="trend_id" schemaName="dashboard_app" tableName="indicator" />
        <dropTable cascadeConstraints="true" schemaName="dashboard_app" tableName="trend" />
        <addColumn schemaName="dashboard_app" tableName="indicator">
            <column name="trend" type="bigint" defaultValue="null" />
        </addColumn>
    </changeSet>

    <changeSet id="CARE #48.1" author="Adrian Boguszewski">
        <delete tableName="cron_task" schemaName="dashboard_app" />
        <addColumn tableName="cron_task" schemaName="dashboard_app">
            <column name="indicator_id" type="integer" />
        </addColumn>
        <addNotNullConstraint tableName="cron_task" columnName="indicator_id" />
        <addForeignKeyConstraint baseTableName="cron_task" baseColumnNames="indicator_id" constraintName="indicator_fk"
                                 referencedTableName="indicator"
                                 referencedColumnNames="indicator_id" />
        <addUniqueConstraint tableName="cron_task" columnNames="indicator_id" />
        <dropColumn tableName="cron_task" columnName="name" schemaName="dashboard_app"/>
        <sql>
            insert into dashboard_app.cron_task (indicator_id, second, minute, hour, day, month, week_day, year, creation_date, modification_date)
            values (1, '0', '0', '0', '*', '*', '?', '', now(), now());
            insert into dashboard_app.cron_task (indicator_id, second, minute, hour, day, month, week_day, year, creation_date, modification_date)
            values (2, '0', '0', '0', '*', '*', '?', '', now(), now());
        </sql>
    </changeSet>

	<changeSet id="CARE #44" author="Łukasz Gąsior">
        <sql>
            ALTER TABLE dashboard_app.field_operation DROP CONSTRAINT field_operation_field_1_id;
            ALTER TABLE dashboard_app.field_operation DROP CONSTRAINT field_operation_field_2_id;
            ALTER TABLE dashboard_app.field_operation ADD CONSTRAINT field_operation_field_1_id FOREIGN KEY (field_1_id)
                REFERENCES dashboard_app.computed_field (computed_field_id) MATCH FULL
                ON DELETE NO ACTION ON UPDATE NO ACTION NOT DEFERRABLE;
            ALTER TABLE dashboard_app.field_operation ADD CONSTRAINT field_operation_field_2_id FOREIGN KEY (field_2_id)
                REFERENCES dashboard_app.computed_field (computed_field_id) MATCH FULL
                ON DELETE NO ACTION ON UPDATE NO ACTION NOT DEFERRABLE;
            DROP TABLE dashboard_app.complex_condition_field;
        </sql>
    </changeSet>

    <changeSet id="CARE #48.2" author="Adrian Boguszewski">
        <delete tableName="cron_task" schemaName="dashboard_app" />
        <addColumn tableName="cron_task" schemaName="dashboard_app">
            <column name="name" type="character varying" />
        </addColumn>
        <addNotNullConstraint tableName="cron_task" columnName="name" />
        <addUniqueConstraint tableName="cron_task" columnNames="name" />
        <dropColumn tableName="cron_task" columnName="indicator_id" schemaName="dashboard_app"/>
        <sql>
            insert into dashboard_app.cron_task (name, second, minute, hour, day, month, week_day, year, creation_date, modification_date) values
            ('daily', '0', '00', '00', '*', '*', '?', '', now(), now()),
            ('weekly', '0', '0', '0', '?', '*', 'MON', '', now(), now()),
            ('monthly', '0', '0', '0', '1', '*', '?', '', now(), now()),
            ('quarterly', '0', '0', '0', '1', '1/3', '?', '', now(), now()),
            ('yearly', '0', '0', '0', '1', '1', '?', '', now(), now());
        </sql>
    </changeSet>

    <changeSet id="CARE #51" author="Lech Różański">
        <sql>
            create table dashboard_app.language(
                language_id serial not null,
                code character varying(10),
                name character varying(50) not null,
                defined boolean not null default false,
                creation_date timestamp,
                modification_date timestamp,
                constraint language_pk primary key (language_id),
                constraint language_code_uk unique (code),
                constraint language_name_uk unique (name)
            );

            insert into dashboard_app.language(language_id, name, defined, creation_date, modification_date)
                values ('1', 'Default English', 'true', now(), now());

            insert into dashboard_app.language (language_id, code, name, defined, creation_date, modification_date) VALUES
            ('2', 'ab', 'Abkhazian', 'false', now(), now()), ('3', 'af', 'Afrikaans', 'false', now(), now()),
            ('4', 'an', 'Aragonese', 'false', now(), now()), ('5', 'ar', 'Arabic', 'false', now(), now()),
            ('6', 'as', 'Assamese', 'false', now(), now()), ('7', 'az', 'Azerbaijani', 'false', now(), now()),
            ('8', 'be', 'Belarusian', 'false', now(), now()), ('9', 'bg', 'Bulgarian', 'false', now(), now()),
            ('10', 'bn', 'Bengali', 'false', now(), now()), ('11', 'bo', 'Tibetan', 'false', now(), now()),
            ('12', 'br', 'Breton', 'false', now(), now()), ('13', 'bs', 'Bosnian', 'false', now(), now()),
            ('14', 'ca', 'Catalan / Valencian', 'false', now(), now()), ('15', 'ce', 'Chechen', 'false', now(), now()),
            ('16', 'co', 'Corsican', 'false', now(), now()), ('17', 'cs', 'Czech', 'false', now(), now()),
            ('18', 'cu', 'Church Slavic', 'false', now(), now()), ('19', 'cy', 'Welsh', 'false', now(), now()),
            ('20', 'da', 'Danish', 'false', now(), now()), ('21', 'de', 'German', 'false', now(), now()),
            ('22', 'el', 'Greek', 'false', now(), now()), ('23', 'en', 'English (US)', 'false', now(), now()),
            ('24', 'eo', 'Esperanto', 'false', now(), now()), ('25', 'es', 'Spanish / Castilian', 'false', now(), now()),
            ('26', 'et', 'Estonian', 'false', now(), now()), ('27', 'eu', 'Basque', 'false', now(), now()),
            ('28', 'fa', 'Persian', 'false', now(), now()), ('29', 'fi', 'Finnish', 'false', now(), now()),
            ('30', 'fj', 'Fijian', 'false', now(), now()), ('31', 'fo', 'Faroese', 'false', now(), now()),
            ('32', 'fr', 'French', 'false', now(), now()), ('33', 'fy', 'Western Frisian', 'false', now(), now()),
            ('34', 'ga', 'Irish', 'false', now(), now()), ('35', 'gd', 'Gaelic / Scottish Gaelic', 'false', now(), now()),
            ('36', 'gl', 'Galician', 'false', now(), now()), ('37', 'gv', 'Manx', 'false', now(), now()),
            ('38', 'he', 'Hebrew', 'false', now(), now()), ('39', 'hi', 'Hindi', 'false', now(), now()),
            ('40', 'hr', 'Croatian', 'false', now(), now()), ('41', 'ht', 'Haitian', 'false', now(), now()),
            ('42', 'hu', 'Hungarian', 'false', now(), now()), ('43', 'hy', 'Armenian', 'false', now(), now()),
            ('44', 'id', 'Indonesian', 'false', now(), now()), ('45', 'is', 'Icelandic', 'false', now(), now()),
            ('46', 'it', 'Italian', 'false', now(), now()), ('47', 'ja', 'Japanese', 'false', now(), now()),
            ('48', 'jv', 'Javanese', 'false', now(), now()), ('49', 'ka', 'Georgian', 'false', now(), now()),
            ('50', 'kg', 'Kongo', 'false', now(), now()), ('51', 'ko', 'Korean', 'false', now(), now()),
            ('52', 'ku', 'Kurdish', 'false', now(), now()), ('53', 'kw', 'Cornish', 'false', now(), now()),
            ('54', 'ky', 'Kirghiz', 'false', now(), now()), ('55', 'la', 'Latin', 'false', now(), now()),
            ('56', 'lb', 'Luxembourgish', 'false', now(), now()), ('57', 'li', 'Limburgan', 'false', now(), now()),
            ('58', 'ln', 'Lingala', 'false', now(), now()), ('59', 'lt', 'Lithuanian', 'false', now(), now()),
            ('60', 'lv', 'Latvian', 'false', now(), now()), ('61', 'mg', 'Malagasy', 'false', now(), now()),
            ('62', 'mk', 'Macedonian', 'false', now(), now()), ('63', 'mn', 'Mongolian', 'false', now(), now()),
            ('64', 'mo', 'Moldavian', 'false', now(), now()), ('65', 'ms', 'Malay', 'false', now(), now()),
            ('66', 'mt', 'Maltese', 'false', now(), now()), ('67', 'my', 'Burmese', 'false', now(), now()),
            ('68', 'nb', 'Norwegian (Bokmål)', 'false', now(), now()), ('69', 'ne', 'Nepali', 'false', now(), now()),
            ('70', 'nl', 'Dutch', 'false', now(), now()), ('71', 'nn', 'Norwegian (Nynorsk)', 'false', now(), now()),
            ('72', 'no', 'Norwegian', 'false', now(), now()), ('73', 'oc', 'Occitan (post 1500)', 'false', now(), now()),
            ('74', 'pl', 'Polish', 'false', now(), now()), ('75', 'pt', 'Portuguese', 'false', now(), now()),
            ('76', 'rm', 'Raeto-Romance', 'false', now(), now()), ('77', 'ro', 'Romanian', 'false', now(), now()),
            ('78', 'ru', 'Russian', 'false', now(), now()), ('79', 'sc', 'Sardinian', 'false', now(), now()),
            ('80', 'se', 'Northern Sami', 'false', now(), now()), ('81', 'sk', 'Slovak', 'false', now(), now()),
            ('82', 'sl', 'Slovenian', 'false', now(), now()), ('83', 'so', 'Somali', 'false', now(), now()),
            ('84', 'sq', 'Albanian', 'false', now(), now()), ('85', 'sr', 'Serbian', 'false', now(), now()),
            ('86', 'sv', 'Swedish', 'false', now(), now()), ('87', 'sw', 'Swahili', 'false', now(), now()),
            ('88', 'tk', 'Turkmen', 'false', now(), now()), ('89', 'tr', 'Turkish', 'false', now(), now()),
            ('90', 'ty', 'Tahitian', 'false', now(), now()), ('91', 'uk', 'Ukrainian', 'false', now(), now()),
            ('92', 'ur', 'Urdu', 'false', now(), now()), ('93', 'uz', 'Uzbek', 'false', now(), now()),
            ('94', 'vi', 'Vietnamese', 'false', now(), now()), ('95', 'vo', 'Volapük', 'false', now(), now()),
            ('96', 'yi', 'Yiddish', 'false', now(), now()), ('97', 'zh', 'Chinese', 'false', now(), now())
        </sql>
    </changeSet>

    <changeSet id="CARE #?" author="Adrian Boguszewski">
        <sql>
            create table dashboard_app.frequency(
                frequency_id serial not null,
                frequency_name character varying(10),
                parent_frequency_id integer,
                creation_date timestamp,
                modification_date timestamp,
            constraint frequency_pk primary key (frequency_id),
            constraint frequency_uq unique (frequency_name),
            constraint frequency_fk foreign key (parent_frequency_id) references dashboard_app.frequency (frequency_id));

            insert into dashboard_app.frequency(frequency_name, parent_frequency_id, creation_date, modification_date) values
                ('yearly', null, now(), now()),
                ('quarterly', 1, now(), now()),
                ('monthly', 2, now(), now()),
                ('weekly', 3, now(), now()),
                ('daily', 4, now(), now());
        </sql>
        <dropColumn tableName="indicator_value" columnName="date" schemaName="dashboard_app"/>
        <addColumn tableName="indicator_value" schemaName="dashboard_app">
            <column name="nominator" type="decimal(19,6)"/>
        </addColumn>
        <addColumn tableName="indicator_value" schemaName="dashboard_app">
            <column name="denominator" type="decimal(19,6)"/>
        </addColumn>
        <addColumn tableName="indicator_value" schemaName="dashboard_app">
            <column name="frequency_id" type="integer"/>
        </addColumn>
        <addColumn tableName="cron_task" schemaName="dashboard_app">
            <column name="frequency_id" type="integer"/>
        </addColumn>
        <update tableName="cron_task" schemaName="dashboard_app">
            <column name="frequency_id" value="1"/>
            <where>name = 'yearly'</where>
        </update>
        <update tableName="cron_task" schemaName="dashboard_app">
            <column name="frequency_id" value="2"/>
            <where>name = 'quarterly'</where>
        </update>
        <update tableName="cron_task" schemaName="dashboard_app">
            <column name="frequency_id" value="3"/>
            <where>name = 'monthly'</where>
        </update>
        <update tableName="cron_task" schemaName="dashboard_app">
            <column name="frequency_id" value="4"/>
            <where>name = 'weekly'</where>
        </update>
        <update tableName="cron_task" schemaName="dashboard_app">
            <column name="frequency_id" value="5"/>
            <where>name = 'daily'</where>
        </update>
        <dropColumn tableName="cron_task" columnName="name" schemaName="dashboard_app"/>
        <addNotNullConstraint tableName="cron_task" columnName="frequency_id" schemaName="dashboard_app"/>
        <addNotNullConstraint tableName="indicator_value" columnName="frequency_id" schemaName="dashboard_app"/>
    </changeSet>

    <changeSet id="CARE #37" author="Adrian Boguszewski">
        <sql>
            insert into dashboard_app.frequency(frequency_name, parent_frequency_id, creation_date, modification_date) values
            ('default', null, now(), now());
        </sql>
    </changeSet>

    <changeSet id="CARE #51.1" author="Lech Różański">
        <sql>
            alter table dashboard_app.indicator_indicator_category
                drop constraint indicator_indicator_category_indicator_id_fk,
                drop constraint indicator_indicator_category_indicator_category_id_fk,
                add constraint indicator_indicator_category_indicator_id_fk foreign key (indicator_id)
                    references dashboard_app.indicator (indicator_id) match full
                    on delete cascade on update cascade not deferrable,
                add constraint indicator_indicator_category_indicator_category_id_fk foreign key (indicator_category_id)
                    references dashboard_app.indicator_category (indicator_category_id) match full
                    on delete cascade on update cascade not deferrable;

            delete from dashboard_app.language where language_id > 1;
            update dashboard_app.language set code = 'df';

            alter table dashboard_app.language
                alter column code type character varying(2),
                alter column code set not null;

            alter sequence dashboard_app.language_language_id_seq
                restart with 2;

            alter table dashboard_app.care_user
                add column default_language_id integer not null default 1,
                add constraint care_user_default_language_id_fk foreign key (default_language_id)
                    references dashboard_app.language (language_id) match full
                    on delete set default on update cascade;
        </sql>
    </changeSet>

    <changeSet id="CARE #37.1" author="Adrian Boguszewski">
        <update tableName="frequency" schemaName="dashboard_app">
            <column name="frequency_name" value="undefined"/>
            <where>frequency_name = 'default'</where>
        </update>
    </changeSet>

    <changeSet id="CARE #53" author="Adrian Boguszewski">
        <sql>
            insert into dashboard_app.indicator_value (indicator_id, area_id, frequency_id, value, nominator, denominator, modification_date, creation_date) values
                (2, 1, 3, 23, 23, 1, now(), now());
        </sql>
    </changeSet>

    <changeSet id="CARE #57" author="Łukasz Gąsior">
        <sql>

            CREATE TABLE dashboard_app.select_column(
                select_column_id serial not null,
                name varchar not null,
                function varchar default null,
                creation_date timestamp,
                modification_date timestamp,
                constraint select_column_pk primary key (select_column_id)
            );

            CREATE TABLE dashboard_app.having(
                having_id serial not null,
                select_column_id integer not null,
                operator varchar not null,
                value varchar not null,
                creation_date timestamp,
                modification_date timestamp,
                constraint having_pk primary key (having_id),
                constraint having_select_column_id foreign key (select_column_id)
                references dashboard_app.select_column (select_column_id) match full
                on delete set null on update set null not deferrable
            );

            CREATE TABLE dashboard_app.grouped_by(
                grouped_by_id serial not null,
                having_id integer,
                table_name varchar not null,
                field_name varchar not null,
                creation_date timestamp,
                modification_date timestamp,
                constraint grouped_by_pk primary key (grouped_by_id),
                constraint grouped_by_having_id foreign key (having_id)
                references dashboard_app.having (having_id) match full
                on delete set null on update set null not deferrable
            );

            CREATE TABLE dashboard_app.dw_query (
                dw_query_id serial not null,
                combination_id integer default NULL,
                grouped_by_id integer default NULL,
                creation_date timestamp,
                modification_date timestamp,
                constraint dw_query_pk primary key (dw_query_id),
                constraint dw_query_grouped_by_id foreign key (grouped_by_id)
                references dashboard_app.grouped_by (grouped_by_id) match full
                on delete set null on update set null not deferrable
            );

            CREATE TABLE dashboard_app.dw_query_select_column(
                select_column_id integer not null,
                dw_query_id integer not null,
                constraint dw_query_select_column_pk primary key (select_column_id, dw_query_id),
                constraint dw_query_select_column_select_column_id foreign key (select_column_id)
                references dashboard_app.select_column (select_column_id) match full
                on delete cascade on update cascade not deferrable,
                constraint dw_query_select_column_dw_query_id foreign key (dw_query_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete cascade on update cascade not deferrable
            );

            CREATE TABLE dashboard_app.simple_dw_query(
                simple_dw_query_id serial not null,
                dw_query_id integer not null,
                table_name varchar,
                creation_date timestamp,
                modification_date timestamp,
                constraint simple_dw_query_pk primary key (simple_dw_query_id),
                constraint simple_dw_query_dw_query_id foreign key (dw_query_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete cascade on update cascade not deferrable
            );

            CREATE TABLE dashboard_app.complex_dw_query(
                complex_dw_query_id serial not null,
                dw_query_id integer not null,
                dimension_id integer,
                union_id integer DEFAULT null,
                intersection_id integer DEFAULT null,
                creation_date timestamp,
                modification_date timestamp,
                constraint complex_dw_query_pk primary key (complex_dw_query_id),
                constraint complex_dw_query_dw_query_id foreign key (dw_query_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete cascade on update cascade not deferrable,
                constraint complex_dw_query_dimension_id foreign key (dimension_id)
                references dashboard_app.simple_dw_query (simple_dw_query_id) match full
                on delete set null on update set null not deferrable,
                constraint complex_dw_query_union_id foreign key (union_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete set null on update set null not deferrable,
                constraint complex_dw_query_intersection_id foreign key (intersection_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete set null on update set null not deferrable
            );

            CREATE TABLE dashboard_app.combination(
                combination_id serial not null,
                dw_query_id integer not null,
                type varchar,
                foreign_key varchar,
                referenced_key varchar,
                creation_date timestamp,
                modification_date timestamp,
                constraint combination_pk primary key (combination_id),
                constraint combination_dw_query_id foreign key (dw_query_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete cascade on update cascade not deferrable
            );

            ALTER TABLE dashboard_app.dw_query ADD CONSTRAINT
                dw_query_combination_id foreign key (combination_id)
                references dashboard_app.combination (combination_id) match full
                on delete set null on update set null not deferrable;

            CREATE TABLE dashboard_app.fact(
                fact_id serial not null,
                table_id integer not null,
                combine_type varchar default null,
                creation_date timestamp,
                modification_date timestamp,
                constraint fact_pk primary key (fact_id),
                constraint fact_table_id foreign key (table_id)
                references dashboard_app.simple_dw_query (simple_dw_query_id) match full
                on delete set null on update set null not deferrable
            );

            CREATE TABLE dashboard_app.fact_complex_dw_query(
                complex_dw_query_id integer not null,
                fact_id integer not null,
                constraint complex_dw_query_fact_pk primary key (complex_dw_query_id, fact_id),
                constraint complex_dw_query_fact_complex_dw_query_id foreign key (complex_dw_query_id)
                references dashboard_app.complex_dw_query (complex_dw_query_id) match full
                on delete cascade on update cascade not deferrable,
                constraint complex_dw_query_fact_fact_id foreign key (fact_id)
                references dashboard_app.fact (fact_id) match full
                on delete cascade on update cascade not deferrable
            );

            ALTER TABLE dashboard_app.indicator
                DROP column complex_condition_id;

            ALTER TABLE dashboard_app.indicator
                DROP column computed_field_id;

            ALTER TABLE dashboard_app.indicator
                ADD column denominator_id integer;

            ALTER TABLE dashboard_app.indicator
                ADD column numerator_id integer;

            ALTER TABLE dashboard_app.indicator ADD CONSTRAINT
                indicator_denominator_id foreign key (denominator_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete set null on update set null not deferrable;

            ALTER TABLE dashboard_app.indicator ADD CONSTRAINT
                indicator_numerator_id foreign key (numerator_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete set null on update set null not deferrable;

            CREATE TABLE dashboard_app.simple_dw_query_condition(
                dw_query_id integer not null,
                condition_id integer not null,
                constraint simple_dw_query_condition_pk primary key (dw_query_id, condition_id),
                constraint simple_dw_query_condition_dw_query_id foreign key (dw_query_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete cascade on update cascade not deferrable,
                constraint simple_dw_query_condition_condition_id foreign key (condition_id)
                references dashboard_app.condition (condition_id) match full
                on delete cascade on update cascade not deferrable
            );

        </sql>
    </changeSet>

    <changeSet id="CARE #57 (2)" author="Łukasz Gąsior">
        <sql>
            DROP TABLE dashboard_app.simple_dw_query_condition;

            CREATE TABLE dashboard_app.dw_query_condition(
                dw_query_id integer not null,
                condition_id integer not null,
                constraint dw_query_condition_pk primary key (dw_query_id, condition_id),
                constraint dw_query_condition_dw_query_id foreign key (dw_query_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete cascade on update cascade not deferrable,
                constraint dw_query_condition_condition_id foreign key (condition_id)
                references dashboard_app.condition (condition_id) match full
                on delete cascade on update cascade not deferrable
            );

            ALTER TABLE dashboard_app.complex_dw_query
                DROP COLUMN dimension_id;

            ALTER TABLE dashboard_app.complex_dw_query
                ADD COLUMN dimension varchar;

            CREATE TABLE dashboard_app.where_group(
                where_group_id serial not null,
                operator varchar,
                creation_date timestamp,
                modification_date timestamp,
                constraint where_group_pk primary key (where_group_id)
            );

            CREATE TABLE dashboard_app.where_group_condition(
                where_group_id integer not null,
                condition_id integer not null,
                constraint where_group_condition_pk primary key (where_group_id, condition_id),
                constraint where_group_condition_where_group_id foreign key (where_group_id)
                references dashboard_app.where_group (where_group_id) match full
                on delete cascade on update cascade not deferrable,
                constraint dw_query_condition_condition_id foreign key (condition_id)
                references dashboard_app.condition (condition_id) match full
                on delete cascade on update cascade not deferrable
            );

            CREATE TABLE dashboard_app.where_group_where_group(
                where_group_id integer not null,
                where_group2_id integer not null,
                constraint where_group_where_group_pk primary key (where_group_id, where_group2_id),
                constraint where_group_where_group_where_group_id foreign key (where_group_id)
                references dashboard_app.where_group (where_group_id) match full
                on delete cascade on update cascade not deferrable,
                constraint where_group_where_group_where_group2_id foreign key (where_group2_id)
                references dashboard_app.where_group (where_group_id) match full
                on delete cascade on update cascade not deferrable
            );

            ALTER TABLE dashboard_app.dw_query
                ADD COLUMN where_group_id integer;

            ALTER TABLE dashboard_app.dw_query ADD CONSTRAINT
                dw_query_where_group_id foreign key (where_group_id)
                references dashboard_app.where_group (where_group_id) match full
                on delete set null on update set null not deferrable;

        </sql>
    </changeSet>

    <changeSet id="CARE #10.1" author="Adrian Boguszewski">
        <dropColumn tableName="indicator" columnName="type_id" schemaName="dashboard_app"/>
    </changeSet>

	<changeSet id="CARE #57 (3)" author="Łukasz Gąsior">
        <sql>

            DROP TABLE dashboard_app.indicator_user;

            CREATE TABLE IF NOT EXISTS dashboard_app.indicator_role(
                indicator_id integer NOT NULL,
                role_id integer NOT NULL,
                CONSTRAINT indicator_role_indicator_id_fk FOREIGN KEY (indicator_id)
                REFERENCES dashboard_app.indicator (indicator_id) MATCH FULL
                ON DELETE NO ACTION ON UPDATE NO ACTION NOT DEFERRABLE,
                CONSTRAINT indicator_role_role_id_fk FOREIGN KEY (role_id)
                REFERENCES dashboard_app.care_user (user_id) MATCH FULL
                ON DELETE NO ACTION ON UPDATE NO ACTION NOT DEFERRABLE,
                CONSTRAINT indicator_user_uk UNIQUE (indicator_id, role_id)
            );

            ALTER TABLE dashboard_app.indicator
                ADD column user_id integer;

            ALTER TABLE dashboard_app.indicator ADD CONSTRAINT
                indicator_user_id foreign key (user_id)
                references dashboard_app.care_user (user_id) match full
                on delete set null on update set null not deferrable;

            ALTER TABLE dashboard_app.condition DROP COLUMN complex_condition_id;

            ALTER TABLE dashboard_app.fact_complex_dw_query DROP CONSTRAINT complex_dw_query_fact_complex_dw_query_id;

            ALTER TABLE dashboard_app.fact_complex_dw_query ADD CONSTRAINT
                complex_dw_query_fact_complex_dw_query_id foreign key (complex_dw_query_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete cascade on update cascade not deferrable;

            ALTER TABLE dashboard_app.fact DROP CONSTRAINT fact_table_id;

            ALTER TABLE dashboard_app.fact ADD CONSTRAINT
                fact_table_id foreign key (table_id)
                references dashboard_app.dw_query (dw_query_id) match full
                on delete set null on update set null not deferrable;
        </sql>
    </changeSet>

    <changeSet id="CARE #37.2" author="Adrian Boguszewski">
        <update tableName="indicator" schemaName="dashboard_app">
            <column name="frequency" value="3"/>
        </update>
        <renameColumn tableName="indicator_value" oldColumnName="nominator" newColumnName="numerator" schemaName="dashboard_app"/>
        <renameColumn tableName="indicator" oldColumnName="frequency" newColumnName="frequency_id" schemaName="dashboard_app"/>
        <addColumn tableName="indicator_value">
            <column name="date" type="timestamp"/>
        </addColumn>
        <addForeignKeyConstraint baseTableName="indicator" baseColumnNames="frequency_id" constraintName="frequency_fk"
                                 referencedTableName="frequency"
                                 referencedColumnNames="frequency_id"/>
    </changeSet>

    <changeSet id="CARE #10 (2)" author="Pawel Reise">
        <delete schemaName="dashboard_app" tableName="dashboard_user">
            <where>dashboard_id = (select dashboard_id from dashboard_app.dashboard where name = 'Map report')</where>
        </delete>
        <delete schemaName="dashboard_app" tableName="dashboard">
            <where>name = 'Map report'</where>
        </delete>
    </changeSet>

    <changeSet id="CARE #57 (4)" author="Łukasz Gąsior">
        <sql>
            DELETE FROM dashboard_app.indicator_value WHERE indicator_id IN (1, 2);
            DELETE FROM dashboard_app.indicator WHERE indicator_id IN (1, 2);
            ALTER TABLE dashboard_app.complex_dw_query DROP COLUMN union_id;
            ALTER TABLE dashboard_app.complex_dw_query DROP COLUMN intersection_id;
            ALTER TABLE dashboard_app.select_column ADD COLUMN table_name varchar;

            ALTER TABLE dashboard_app.complex_dw_query
                ADD COLUMN dimension_key varchar;

            ALTER TABLE dashboard_app.complex_dw_query
                ADD COLUMN fact_key varchar;
        </sql>
    </changeSet>

    <changeSet id="CARE #37.3" author="Adrian Boguszewski">
        <delete tableName="frequency" schemaName="dashboard_app">
            <where>frequency_name = 'undefined'</where>
        </delete>
    </changeSet>

    <changeSet id="CARE #57 (5)" author="Łukasz Gąsior">
        <sql>
            ALTER TABLE dashboard_app.dw_query ADD COLUMN has_period_condition boolean;

            CREATE TABLE dashboard_app.period_comparison (
                period_comparison_id serial not null,
                condition_id integer not null,
                column_name varchar not null,
                start_offset integer not null,
                table_name varchar,
                constraint period_comparison_pk primary key (period_comparison_id),
                constraint period_comparison_condition_id foreign key (condition_id)
                references dashboard_app.condition (condition_id) match full
                on delete cascade on update cascade not deferrable);

            ALTER TABLE dashboard_app.condition ALTER COLUMN field_1_id DROP NOT NULL;
            ALTER TABLE dashboard_app.condition ALTER COLUMN comparison_symbol_id DROP NOT NULL;
        </sql>
    </changeSet>

    <changeSet id="CARE #57 (6)" author="Łukasz Gąsior">
        <sql>
            ALTER TABLE dashboard_app.period_comparison ALTER COLUMN start_offset DROP NOT NULL;
        </sql>
    </changeSet>

    <changeSet id="CARE #10.3" author="Adrian Boguszewski">
        <addColumn tableName="indicator" schemaName="dashboard_app">
            <column name="is_computing" type="boolean" defaultValue="f" />
        </addColumn>
        <update tableName="indicator" schemaName="dashboard_app">
            <column name="is_computing" value="t"/>
        </update>
    </changeSet>
    
    <changeSet id="CARE #37.4" author="Adrian Boguszewski">
        <addColumn tableName="indicator" schemaName="dashboard_app">
            <column name="is_additive" type="boolean" defaultValue="f"/>
        </addColumn>
    </changeSet>

    <changeSet id="CARE #37" author="Krzysztof Kaczmarczyk">
        <sql>
            CREATE TABLE dashboard_app.date_depth (date_depth date);
            INSERT INTO dashboard_app.date_depth (date_depth) values ('2013-01-01 23:59:59');
        </sql>
    </changeSet>

</databaseChangeLog>
